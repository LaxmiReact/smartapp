{"version":3,"sources":["components/NavBar/NavBar.js","components/Footer/Footer.js","components/MainContent/SmartDropdown/SmartDropdown.js","components/MainContent/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","Option","Select","SmartDropdown","state","dropDownData","noOfItems","handleChange","value","addCountry","axios","get","then","res","openNotificationWithIcon","catch","error","props","addValue","country","descrip","notification","message","description","nextProps","this","setState","size","mode","style","width","placeholder","onChange","e","map","data","index","key","Component","MainContent","updatedCountries","unshift","privilage","countries","length","paddingTop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e1a6fa43.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <a className=\"navbar-brand\" href=\"#\">Smart App</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                <div className=\"navbar-nav\">\r\n                    <a className=\"nav-item nav-link active\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\r\n                    <a className=\"nav-item nav-link\" href=\"/\">About</a>\r\n                    <a className=\"nav-item nav-link\" href=\"/\">Contact</a>\r\n                    <a className=\"nav-item nav-link\" href=\"/\">List</a>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n    return (<footer className=\"footer\">\r\n        <div className=\"container\">\r\n            <span className=\"text-muted\">Footer content</span>\r\n        </div>\r\n    </footer>);\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport { Select, Spin, notification } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nclass SmartDropdown extends Component {\r\n    state = {\r\n        dropDownData: [],\r\n        noOfItems: 0\r\n    }\r\n\r\n    handleChange = (value) => {\r\n        let addCountry = value && value[0]\r\n        axios.get(`http://13.57.235.126:5000/addcountry?name=${addCountry}`).then(res => {\r\n            this.openNotificationWithIcon('success', addCountry, \"Country Added Successfully\")\r\n        }).catch(error => this.openNotificationWithIcon('error', addCountry, \"Duplicate Value\"));\r\n        this.props.addValue(addCountry)\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.dropDownData !== this.state.dropDownData) {\r\n            this.setState({ dropDownData: nextProps.dropDownData })\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, country, descrip) => {\r\n        notification[type]({\r\n            message: `Country Name : ${country}`,\r\n            description: descrip\r\n\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { dropDownData } = this.state\r\n        return (\r\n            <>\r\n                {this.props.noOfItems !== 0 ? <h6>No of Items from API {this.props.noOfItems}</h6> : <div><Spin size=\"large\" /></div>}\r\n                <Select mode=\"tags\" style={{ width: '50%' }} placeholder=\"Select a Location\" onChange={(e) => this.handleChange(e)}>\r\n                    {dropDownData && dropDownData.map((data, index) => (\r\n                        <Option key={index}>{data}</Option>\r\n                    ))}\r\n                </Select>\r\n            </>);\r\n    }\r\n}\r\n\r\nexport default SmartDropdown;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport SmartDropdown from './SmartDropdown/SmartDropdown';\r\n\r\nclass MainContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { dropDownData: [], noOfItems: 0, privilage: 'admin' }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(`http://13.57.235.126:5000/countries`).then(res => {\r\n            const dropDownData = res.data.countries\r\n            const noOfItems = dropDownData.length\r\n            this.setState({ dropDownData, noOfItems })\r\n        });\r\n    }\r\n\r\n    addCountry = (data) => {\r\n        let { dropDownData, noOfItems } = this.state\r\n        const updatedCountries = dropDownData.unshift(data)\r\n        this.setState({ noOfItems: updatedCountries })\r\n    }\r\n    render() {\r\n        let { dropDownData, noOfItems, privilage } = this.state\r\n        return (<>\r\n            <h3 style={{ paddingTop: \"20px\" }}>Smart Dropdown</h3>\r\n            <SmartDropdown noOfItems={noOfItems} dropDownData={dropDownData} privilage={privilage} addValue={(data) => this.addCountry(data)} />\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default MainContent;\r\n\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Footer from './components/Footer/Footer';\nimport MainContent from './components/MainContent/MainContent';\nimport 'antd/dist/antd.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <MainContent />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}